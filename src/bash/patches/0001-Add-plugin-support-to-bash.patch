From c5687a2a9a9fd5ca4d5184002070b6961037395e Mon Sep 17 00:00:00 2001
From: liuh-80 <58683130+liuh-80@users.noreply.github.com>
Date: Fri, 8 Oct 2021 16:36:34 +0800
Subject: [PATCH] Add plugin support to bash.

---
 bash-5.1/Makefile.in   |  14 +-
 bash-5.1/config.h.in   |   3 +
 bash-5.1/configure     |  18 +-
 bash-5.1/configure.ac  |  10 +
 bash-5.1/execute_cmd.c |  35 +++-
 bash-5.1/plugin.c      | 428 +++++++++++++++++++++++++++++++++++++++++
 bash-5.1/plugin.h      |  79 ++++++++
 bash-5.1/shell.c       |  12 ++
 8 files changed, 583 insertions(+), 16 deletions(-)
 create mode 100644 bash-5.1/plugin.c
 create mode 100644 bash-5.1/plugin.h

diff --git a/bash-5.1/Makefile.in b/bash-5.1/Makefile.in
index 3e3a5d4..16169cd 100644
--- a/bash-5.1/Makefile.in
+++ b/bash-5.1/Makefile.in
@@ -380,6 +380,9 @@ LTLIBINTL = @LTLIBINTL@
 INTLLIBS = @INTLLIBS@
 INTLOBJS = @INTLOBJS@
 
+# Dynamic load library.
+DYNAMICLOAD_LIB = @DYNAMICLOAD_LIB@
+
 # Our malloc.
 MALLOC_TARGET = @MALLOC_TARGET@
 
@@ -421,7 +424,7 @@ BASHINCFILES =	 $(BASHINCDIR)/posixstat.h $(BASHINCDIR)/ansi_stdlib.h \
 		 $(BASHINCDIR)/ocache.h
 
 LIBRARIES = $(GLOB_LIB) $(SHLIB_LIB) $(READLINE_LIB) $(HISTORY_LIB) $(TERMCAP_LIB) \
-	    $(TILDE_LIB) $(MALLOC_LIB) $(INTL_LIB) $(LIBICONV) $(LOCAL_LIBS)
+	    $(TILDE_LIB) $(MALLOC_LIB) $(INTL_LIB) $(LIBICONV) $(LOCAL_LIBS) $(DYNAMICLOAD_LIB)
 
 LIBDEP = $(GLOB_DEP) $(SHLIB_DEP) $(INTL_DEP) $(READLINE_DEP) $(HISTORY_DEP) $(TERMCAP_DEP) \
 	 $(TILDE_DEP) $(MALLOC_DEP)
@@ -441,7 +444,7 @@ CSOURCES = shell.c eval.c parse.y general.c make_cmd.c print_cmd.c y.tab.c \
 	   input.c bashhist.c array.c arrayfunc.c assoc.c sig.c pathexp.c \
 	   unwind_prot.c siglist.c bashline.c bracecomp.c error.c \
 	   list.c stringlib.c locale.c findcmd.c redir.c \
-	   pcomplete.c pcomplib.c syntax.c xmalloc.c
+	   pcomplete.c pcomplib.c syntax.c xmalloc.c plugin.c
 
 HSOURCES = shell.h flags.h trap.h hashcmd.h hashlib.h jobs.h builtins.h \
 	   general.h variables.h config.h $(ALLOC_HEADERS) alias.h \
@@ -449,7 +452,7 @@ HSOURCES = shell.h flags.h trap.h hashcmd.h hashlib.h jobs.h builtins.h \
 	   command.h input.h error.h bashansi.h dispose_cmd.h make_cmd.h \
 	   subst.h externs.h siglist.h bashhist.h bashline.h bashtypes.h \
 	   array.h arrayfunc.h sig.h mailcheck.h bashintl.h bashjmp.h \
-	   execute_cmd.h parser.h pathexp.h pathnames.h pcomplete.h assoc.h \
+	   execute_cmd.h parser.h pathexp.h pathnames.h pcomplete.h assoc.h plugin.h \
 	   $(BASHINCFILES)
 
 SOURCES	 = $(CSOURCES) $(HSOURCES) $(BUILTIN_DEFS)
@@ -482,7 +485,7 @@ OBJECTS	 = shell.o eval.o y.tab.o general.o make_cmd.o print_cmd.o $(GLOBO) \
 	   trap.o input.o unwind_prot.o pathexp.o sig.o test.o version.o \
 	   alias.o array.o arrayfunc.o assoc.o braces.o bracecomp.o bashhist.o \
 	   bashline.o $(SIGLIST_O) list.o stringlib.o locale.o findcmd.o redir.o \
-	   pcomplete.o pcomplib.o syntax.o xmalloc.o $(SIGNAMES_O)
+	   pcomplete.o pcomplib.o syntax.o xmalloc.o plugin.o $(SIGNAMES_O)
 
 # Where the source code of the shell builtins resides.
 BUILTIN_SRCDIR=$(srcdir)/builtins
@@ -1039,7 +1042,7 @@ eval.o: make_cmd.h subst.h sig.h pathnames.h externs.h parser.h
 eval.o: input.h execute_cmd.h 
 eval.o: bashhist.h assoc.h ${BASHINCDIR}/ocache.h ${BASHINCDIR}/chartypes.h
 execute_cmd.o: config.h bashtypes.h ${BASHINCDIR}/filecntl.h ${BASHINCDIR}/posixstat.h bashansi.h ${BASHINCDIR}/ansi_stdlib.h
-execute_cmd.o: shell.h syntax.h config.h bashjmp.h ${BASHINCDIR}/posixjmp.h command.h ${BASHINCDIR}/stdc.h error.h
+execute_cmd.o: shell.h syntax.h config.h bashjmp.h ${BASHINCDIR}/posixjmp.h command.h ${BASHINCDIR}/stdc.h error.h plugin.h
 execute_cmd.o: general.h xmalloc.h bashtypes.h variables.h arrayfunc.h conftypes.h array.h hashlib.h
 execute_cmd.o: quit.h ${BASHINCDIR}/maxpath.h unwind_prot.h dispose_cmd.h
 execute_cmd.o: make_cmd.h subst.h sig.h pathnames.h externs.h parser.h
@@ -1050,6 +1053,7 @@ execute_cmd.o: ${BASHINCDIR}/posixtime.h ${BASHINCDIR}/chartypes.h
 execute_cmd.o: $(DEFSRC)/getopt.h
 execute_cmd.o: bashhist.h input.h ${GRAM_H} assoc.h hashcmd.h alias.h
 execute_cmd.o: ${BASHINCDIR}/ocache.h ${BASHINCDIR}/posixwait.h
+plugin.o: plugin.h
 expr.o: config.h bashansi.h ${BASHINCDIR}/ansi_stdlib.h 
 expr.o: shell.h syntax.h config.h bashjmp.h ${BASHINCDIR}/posixjmp.h command.h ${BASHINCDIR}/stdc.h error.h
 expr.o: general.h xmalloc.h bashtypes.h variables.h arrayfunc.h conftypes.h array.h hashlib.h
diff --git a/bash-5.1/config.h.in b/bash-5.1/config.h.in
index ab316d4..ab5634f 100644
--- a/bash-5.1/config.h.in
+++ b/bash-5.1/config.h.in
@@ -38,6 +38,9 @@
    BSD-like job control. */
 #undef JOB_CONTROL
 
+/* Define BASH_SHELL_EXECVE_PLUGIN if need plugin support. */
+#undef BASH_SHELL_EXECVE_PLUGIN
+
 /* Define ALIAS if you want the alias features. */
 #undef ALIAS
 
diff --git a/bash-5.1/configure b/bash-5.1/configure
index 0f1d3ed..c462d55 100644
--- a/bash-5.1/configure
+++ b/bash-5.1/configure
@@ -632,6 +632,7 @@ LOCAL_DEFS
 LOCAL_LDFLAGS
 LOCAL_CFLAGS
 LOCAL_LIBS
+DYNAMICLOAD_LIB
 MALLOC_DEBUG
 DEBUG
 RELSTATUS
@@ -858,6 +859,7 @@ enable_single_help_strings
 enable_strict_posix_default
 enable_usg_echo_default
 enable_xpg_echo_default
+enable_bash_shell_execve_plugin
 enable_mem_scramble
 enable_profiling
 enable_static_link
@@ -1568,6 +1570,7 @@ Optional Features:
   --enable-xpg-echo-default
                           make the echo builtin expand escape sequences by
                           default
+  --enable-bash-plugin    enable bash plugin features
   --enable-mem-scramble   scramble memory on calls to malloc and free
   --enable-profiling      allow profiling with gprof
   --enable-static-link    link bash statically, for use as a root shell
@@ -3027,6 +3030,7 @@ opt_dircomplete_expand_default=no
 opt_globascii_default=yes
 opt_function_import=yes
 opt_dev_fd_stat_broken=no
+opt_bash_shell_execve_plugin=yes
 
 opt_static_link=no
 opt_profiling=no
@@ -3048,6 +3052,7 @@ if test $opt_minimal_config = yes; then
 	opt_multibyte=yes opt_cond_regexp=no opt_coproc=no
 	opt_casemod_attrs=no opt_casemod_expansions=no opt_extglob_default=no
 	opt_globascii_default=yes
+	opt_bash_shell_execve_plugin=no
 fi
 
 # Check whether --enable-alias was given.
@@ -3235,6 +3240,10 @@ if test "${enable_xpg_echo_default+set}" = set; then :
   enableval=$enable_xpg_echo_default; opt_xpg_echo=$enableval
 fi
 
+# Check whether --enable-bash-shell-execve-plugin was given.
+if test "${enable_bash_shell_execve_plugin+set}" = set; then :
+  enableval=$enable_bash_shell_execve_plugin; opt_bash_shell_execve_plugin=$enableval
+fi
 
 # Check whether --enable-mem-scramble was given.
 if test "${enable_mem_scramble+set}" = set; then :
@@ -3254,10 +3263,11 @@ fi
 
 
 
-
-
-
-
+DYNAMICLOAD_LIB=
+if test $opt_bash_shell_execve_plugin = yes; then
+$as_echo "#define BASH_SHELL_EXECVE_PLUGIN 1" >>confdefs.h
+DYNAMICLOAD_LIB=-ldl
+fi
 
 if test $opt_alias = yes; then
 $as_echo "#define ALIAS 1" >>confdefs.h
diff --git a/bash-5.1/configure.ac b/bash-5.1/configure.ac
index 2fe3e7d..0064683 100644
--- a/bash-5.1/configure.ac
+++ b/bash-5.1/configure.ac
@@ -182,6 +182,7 @@ opt_dircomplete_expand_default=no
 opt_globascii_default=yes
 opt_function_import=yes
 opt_dev_fd_stat_broken=no
+opt_bash_shell_execve_plugin=yes
 
 dnl options that affect how bash is compiled and linked
 opt_static_link=no
@@ -203,6 +204,7 @@ if test $opt_minimal_config = yes; then
 	opt_multibyte=yes opt_cond_regexp=no opt_coproc=no
 	opt_casemod_attrs=no opt_casemod_expansions=no opt_extglob_default=no
 	opt_globascii_default=yes
+	opt_bash_shell_execve_plugin=no
 fi
 
 AC_ARG_ENABLE(alias, AC_HELP_STRING([--enable-alias], [enable shell aliases]), opt_alias=$enableval)
@@ -242,6 +244,7 @@ AC_ARG_ENABLE(single-help-strings, AC_HELP_STRING([--enable-single-help-strings]
 AC_ARG_ENABLE(strict-posix-default, AC_HELP_STRING([--enable-strict-posix-default], [configure bash to be posix-conformant by default]), opt_strict_posix=$enableval)
 AC_ARG_ENABLE(usg-echo-default, AC_HELP_STRING([--enable-usg-echo-default], [a synonym for --enable-xpg-echo-default]), opt_xpg_echo=$enableval)
 AC_ARG_ENABLE(xpg-echo-default, AC_HELP_STRING([--enable-xpg-echo-default], [make the echo builtin expand escape sequences by default]), opt_xpg_echo=$enableval)
+AC_ARG_ENABLE(bash-shell-execve-plugin, AC_HELP_STRING([--enable-bash-shell-execve-plugin], [enable bash shell execve plugin features]), opt_bash_shell_execve_plugin=$enableval)
 
 dnl options that alter how bash is compiled and linked
 AC_ARG_ENABLE(mem-scramble, AC_HELP_STRING([--enable-mem-scramble], [scramble memory on calls to malloc and free]), opt_memscramble=$enableval)
@@ -260,6 +263,13 @@ dnl opt_readline and opt_history are handled later, because AC_PROG_CC needs
 dnl to be run before we can check the version of an already-installed readline
 dnl library
 
+DYNAMICLOAD_LIB=
+if test $opt_bash_shell_execve_plugin = yes; then
+AC_DEFINE(BASH_SHELL_EXECVE_PLUGIN)
+DYNAMICLOAD_LIB=-ldl
+fi
+AC_SUBST(DYNAMICLOAD_LIB)
+
 if test $opt_alias = yes; then
 AC_DEFINE(ALIAS)
 fi
diff --git a/bash-5.1/execute_cmd.c b/bash-5.1/execute_cmd.c
index d2a0dd7..e74d0f3 100644
--- a/bash-5.1/execute_cmd.c
+++ b/bash-5.1/execute_cmd.c
@@ -82,6 +82,10 @@ extern int errno;
 #  include "test.h"
 #endif
 
+#if defined (BASH_SHELL_EXECVE_PLUGIN)
+#include "plugin.h"
+#endif /* BASH_SHELL_EXECVE_PLUGIN */
+
 #include "builtins/common.h"
 #include "builtins/builtext.h"	/* list of builtins */
 
@@ -171,13 +175,13 @@ static int execute_function PARAMS((SHELL_VAR *, WORD_LIST *, int, struct fd_bit
 static int execute_builtin_or_function PARAMS((WORD_LIST *, sh_builtin_func_t *,
 					    SHELL_VAR *,
 					    REDIRECT *, struct fd_bitmap *, int));
-static void execute_subshell_builtin_or_function PARAMS((WORD_LIST *, REDIRECT *,
+static void execute_subshell_builtin_or_function PARAMS((WORD_LIST *, WORD_LIST *, REDIRECT *,
 						      sh_builtin_func_t *,
 						      SHELL_VAR *,
 						      int, int, int,
 						      struct fd_bitmap *,
 						      int));
-static int execute_disk_command PARAMS((WORD_LIST *, REDIRECT *, char *,
+static int execute_disk_command PARAMS((WORD_LIST *, WORD_LIST *, REDIRECT *, char *,
 				      int, int, int, struct fd_bitmap *, int));
 
 static char *getinterp PARAMS((char *, int, int *));
@@ -4587,7 +4591,7 @@ run_builtin:
 	  if (async == 0)
 	    subshell_level++;
 	  execute_subshell_builtin_or_function
-	    (words, simple_command->redirects, builtin, func,
+	    (words, simple_command->words, simple_command->redirects, builtin, func,
 	     pipe_in, pipe_out, async, fds_to_close,
 	     cmdflags);
 	  subshell_level--;
@@ -4665,7 +4669,7 @@ execute_from_filesystem:
   if (already_forked == 0 && (cmdflags & CMD_NO_FORK) && fifos_pending() > 0)
     cmdflags &= ~CMD_NO_FORK;
 #endif
-  result = execute_disk_command (words, simple_command->redirects, command_line,
+  result = execute_disk_command (words, simple_command->words, simple_command->redirects, command_line,
 			pipe_in, pipe_out, async, fds_to_close,
 			cmdflags);
 
@@ -5169,10 +5173,11 @@ execute_shell_function (var, words)
    to the command, REDIRECTS specifies redirections to perform before the
    command is executed. */
 static void
-execute_subshell_builtin_or_function (words, redirects, builtin, var,
+execute_subshell_builtin_or_function (words, original_words, redirects, builtin, var,
 				      pipe_in, pipe_out, async, fds_to_close,
 				      flags)
      WORD_LIST *words;
+     WORD_LIST *original_words;
      REDIRECT *redirects;
      sh_builtin_func_t *builtin;
      SHELL_VAR *var;
@@ -5258,7 +5263,7 @@ execute_subshell_builtin_or_function (words, redirects, builtin, var,
 	      char *command_line;
 
 	      command_line = savestring (the_printed_command_except_trap ? the_printed_command_except_trap : "");
-	      r = execute_disk_command (words, (REDIRECT *)0, command_line,
+	      r = execute_disk_command (words, original_words, (REDIRECT *)0, command_line,
 		  -1, -1, async, (struct fd_bitmap *)0, flags|CMD_NO_FORK);
 	    }
 	  subshell_exit (r);
@@ -5439,9 +5444,10 @@ setup_async_signals ()
 #endif
 
 static int
-execute_disk_command (words, redirects, command_line, pipe_in, pipe_out,
+execute_disk_command (words, original_words, redirects, command_line, pipe_in, pipe_out,
 		      async, fds_to_close, cmdflags)
      WORD_LIST *words;
+     WORD_LIST *original_words;
      REDIRECT *redirects;
      char *command_line;
      int pipe_in, pipe_out, async;
@@ -5588,10 +5594,25 @@ execute_disk_command (words, redirects, command_line, pipe_in, pipe_out,
 	  exit (execute_shell_function (hookf, wl));
 	}
 
+#if defined (BASH_SHELL_EXECVE_PLUGIN)
+      /*get original user input args for plugin*/
+      char **original_args = strvec_from_word_list (original_words, 0, 0, (int *)NULL);
+      result = invoke_plugin_on_shell_execve (current_user.user_name, command, original_args);
+      xfree(original_args);
+
       /* Execve expects the command name to be in args[0].  So we
 	 leave it there, in the same format that the user used to
 	 type it in. */
       args = strvec_from_word_list (words, 0, 0, (int *)NULL);
+
+#if defined (DEBUG)
+      itrace("invoke_plugin_on_shell_execve: failed invoke plugin with user:%s, command:%s, result: %d", current_user.user_name, command, result);
+#endif
+      if (result) {
+        exit (EXECUTION_FAILURE);
+      }
+#endif /* BASH_SHELL_EXECVE_PLUGIN */
+
       exit (shell_execve (command, args, export_env));
     }
   else
diff --git a/bash-5.1/plugin.c b/bash-5.1/plugin.c
new file mode 100644
index 0000000..df72830
--- /dev/null
+++ b/bash-5.1/plugin.c
@@ -0,0 +1,428 @@
+/* plugin.c -- Bash plugin support. */
+
+/* Copyright (C) 1987-2016 Free Software Foundation, Inc.
+
+   This file is part of GNU Bash, the Bourne Again SHell.
+
+   Bash is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   Bash is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with Bash.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include "config.h"
+
+#if !defined (__GNUC__) && !defined (HAVE_ALLOCA_H) && defined (_AIX)
+  #pragma alloca
+#endif /* _AIX && RISC6000 && !__GNUC__ */
+
+// disable bash memory management when build for UT, PTR_T defined in xmalloc.h, define here for disable warning
+#if defined (BASH_PLUGIN_UT)
+#        define _XMALLOC_H_
+#        define PTR_T	void *
+#        define malloc	mock_malloc
+#        define free	mock_free
+#else
+#endif
+
+#include <stdio.h>
+#include <dlfcn.h>
+#include "chartypes.h"
+#include "bashtypes.h"
+#if !defined (_MINIX) && defined (HAVE_SYS_FILE_H)
+#  include <sys/file.h>
+#endif
+#include "filecntl.h"
+#include "posixstat.h"
+#include <signal.h>
+#include <syslog.h>
+#if defined (HAVE_SYS_PARAM_H)
+#  include <sys/param.h>
+#endif
+
+#if defined (HAVE_UNISTD_H)
+#  include <unistd.h>
+#endif
+
+#include "posixtime.h"
+
+#if defined (HAVE_SYS_RESOURCE_H) && !defined (RLIMTYPE)
+#  include <sys/resource.h>
+#endif
+
+#if defined (HAVE_SYS_TIMES_H) && defined (HAVE_TIMES)
+#  include <sys/times.h>
+#endif
+
+#include <errno.h>
+
+#if !defined (errno)
+extern int errno;
+#endif
+
+#define NEED_FPURGE_DECL
+#define NEED_SH_SETLINEBUF_DECL
+
+#include "bashansi.h"
+#include "bashintl.h"
+
+#include "shell.h"
+#include <y.tab.h>    /* use <...> so we pick it up from the build directory */
+#include "error.h"
+#include "flags.h"
+#include "builtins.h"
+#include "hashlib.h"
+#include "jobs.h"
+#include "execute_cmd.h"
+#include "findcmd.h"
+#include "redir.h"
+#include "trap.h"
+#include "pathexp.h"
+#include "hashcmd.h"
+
+
+#if defined (BASH_SHELL_EXECVE_PLUGIN)
+#include "plugin.h"
+#endif /* BASH_SHELL_EXECVE_PLUGIN */
+
+#if defined (COND_COMMAND)
+#  include "test.h"
+#endif
+
+#include "builtins/common.h"
+
+#include "builtins/getopt.h"
+
+#include <glob/strmatch.h>
+#include <tilde/tilde.h>
+
+#if defined (BUFFERED_INPUT)
+#  include "input.h"
+#endif
+
+#if defined (ALIAS)
+#  include "alias.h"
+#endif
+
+#if defined (HISTORY)
+#  include "bashhist.h"
+#endif
+
+#if defined (HAVE_MBSTR_H) && defined (HAVE_MBSCHR)
+#  include <mbstr.h>        /* mbschr */
+#endif
+
+/* configuration buffer size */
+#define CONFIG_BUFFER_SIZE 256
+
+/* configuration plugin setting key */
+#define CONFIG_PLUGIN_SETTING_KEY "plugin="
+
+/* configuration termination characters */
+#define CONFIG_SETTING_TERMINATIONS " \t\n\r\f"
+
+/* configuration comments start character */
+#define CONFIG_SETTING_COMMENTS_START_CHAR '#'
+
+/* plugin configration file */
+const char *plugin_config_file = "/etc/bash_plugins.conf";
+
+/* plugin on_shell_execve function name */
+static const char *on_shell_execve_function_name = "on_shell_execve";
+
+/* plugin plugin_init function name */
+static const char *plugin_init_function_name = "plugin_init";
+
+/* plugin plugin_uninit function name */
+static const char *plugin_uninit_function_name = "plugin_uninit";
+
+/* plugin handle for test */
+PLUGIN_NODE *global_plugin_list = NULL;
+
+/* Load plugin by plugin path */
+int
+append_plugin(
+        plugin_handle,
+        on_shell_execve,
+        plugin_init,
+        plugin_uninit)
+     void *plugin_handle;
+     on_shell_execve_t *on_shell_execve;
+     plugin_init_t *plugin_init;
+     plugin_uninit_t *plugin_uninit;
+{
+    /* Create and initialize new plugin */
+    PLUGIN_NODE *new_plugin_node = (PLUGIN_NODE*)malloc(sizeof(PLUGIN_NODE));
+    if (new_plugin_node == NULL)
+    {
+        /* When allocate memory failed, stop and return. also output log to both syslog and stderr with LOG_PERROR*/
+        syslog(LOG_PERROR, "Plugin: failed to allocate memory for plugin node.\n");
+        return PLUGIN_LOAD_FAILED;
+    }
+
+    new_plugin_node->next = NULL;
+    new_plugin_node->plugin_handle = plugin_handle;
+    new_plugin_node->on_shell_execve = on_shell_execve;
+    new_plugin_node->plugin_init = plugin_init;
+    new_plugin_node->plugin_uninit = plugin_uninit;
+
+#ifdef DEBUG
+    itrace("Plugin: append plugin node %p to global list %p\n", new_plugin_node, global_plugin_list);
+#endif
+    
+    /* Find the pointer to the latest plugin node's 'next' field */
+    PLUGIN_NODE **current_plugin_node = &global_plugin_list;
+    while (*current_plugin_node != NULL) {
+        current_plugin_node = &((*current_plugin_node)->next);
+
+#ifdef DEBUG
+        itrace("Plugin: founded next plugin node: %p\n", *current_plugin_node);
+#endif
+    }
+    
+    /* append new plugin to tail node */
+    *current_plugin_node = new_plugin_node;
+
+#ifdef DEBUG
+    itrace("Plugin: append new plugin node %p to %p\n", new_plugin_node, current_plugin_node);
+#endif
+
+    return PLUGIN_LOAD_SUCCESS;
+}
+
+
+/* Load plugin by plugin path */
+void
+try_load_plugin_by_path(plugin_path)
+     const char *plugin_path;
+{
+    /* Plugin handle */
+    void *plugin_handle;
+    if ( (plugin_handle = dlopen(plugin_path, RTLD_LAZY)) == NULL) {
+#ifdef DEBUG
+        itrace("Plugin: can't load plugin %s: %s\n", plugin_path, dlerror());
+#endif
+        return;
+    }
+
+    /* Check if plugin support shell execve method */
+    on_shell_execve_t* plugin_on_shell_execve_handle = dlsym(plugin_handle, on_shell_execve_function_name);
+    if (dlerror() != NULL) {
+        dlclose(plugin_handle);
+
+#ifdef DEBUG
+        itrace("Plugin: can't find on_shell_execve function %s: %s\n", plugin_path, dlerror());
+#endif
+        return;
+    }
+    
+
+    /* Check if plugin support un-initialization method */
+    plugin_uninit_t* plugin_uninit_handle = dlsym(plugin_handle, plugin_uninit_function_name);
+    if (dlerror() != NULL) {
+        dlclose(plugin_handle);
+
+#ifdef DEBUG
+        itrace("Plugin: can't find plugin_uninit function %s: %s\n", plugin_path, dlerror());
+#endif
+        return;
+    }
+
+    /* Check if plugin support initialization method */
+    plugin_init_t* plugin_init_handle = dlsym(plugin_handle, plugin_init_function_name);
+    if (dlerror() != NULL) {
+        dlclose(plugin_handle);
+
+#ifdef DEBUG
+        itrace("Plugin: can't find plugin_init function %s: %s\n", plugin_path, dlerror());
+#endif
+        return;
+    }
+    else {
+        /* Initialize plugin */
+        plugin_init_handle();
+    }
+
+    /* Add plugin to plugin list */
+    int plugin_load_result = append_plugin(plugin_handle,
+                    plugin_on_shell_execve_handle,
+                    plugin_init_handle,
+                    plugin_uninit_handle);
+
+    if (plugin_load_result == PLUGIN_LOAD_SUCCESS) {
+#ifdef DEBUG
+        itrace("Plugin: plugin %s loaded\n", plugin_path);
+#endif
+    }
+    else {
+        /* Output plugin load error message, also output log to both syslog and stderr with LOG_PERROR*/
+        syslog(LOG_PERROR,"Plugin: plugin %s load failed, result: %d\n", plugin_path, plugin_load_result);
+    }
+}
+
+/* Load plugin by config file */
+void
+load_plugin_by_config(config_filename)
+     const char *config_filename;
+{
+    FILE *config_file;
+    char buffer[CONFIG_BUFFER_SIZE];
+
+    config_file = fopen(config_filename, "r");
+    if(config_file == NULL) {
+#ifdef DEBUG
+            itrace("Plugin: can't open plugin config file %s: %s\n", config_filename, strerror(errno));
+#endif
+        return;
+    }
+
+    while(fgets(buffer, sizeof buffer, config_file)) {
+        if(*buffer == CONFIG_SETTING_COMMENTS_START_CHAR || isspace(*buffer)) {
+            /* ignore comments or white space. */
+            continue; 
+        }
+        
+        /* read to first whitespace. */
+        strtok(buffer, CONFIG_SETTING_TERMINATIONS); 
+
+        if(!strncmp(buffer, CONFIG_PLUGIN_SETTING_KEY, strlen(CONFIG_PLUGIN_SETTING_KEY))) {
+            /* read plugin path. */
+            char* plugin_path = strtok(buffer + strlen(CONFIG_PLUGIN_SETTING_KEY), CONFIG_SETTING_TERMINATIONS); 
+#ifdef DEBUG
+            itrace("Plugin: load plugin: %s\n", plugin_path);
+#endif
+            try_load_plugin_by_path(plugin_path);
+        }
+#ifdef DEBUG
+        else {
+            /* output debug message. */
+            itrace("Plugin: unrecognized parameter: %s\n", buffer);
+        }
+#endif
+    }
+
+    fclose(config_file);
+}
+
+/* Free loaded plugins */
+void
+free_loaded_plugins()
+{
+    if (global_plugin_list == NULL) {
+        return;
+    }
+	
+#ifdef DEBUG
+    itrace("Plugin: start free plugin from global list %p\n", global_plugin_list);
+#endif
+
+    /* Walk to last plugin */
+    PLUGIN_NODE *next_plugin_node = global_plugin_list;
+    while (next_plugin_node != NULL) {
+
+        /* Unload plugin */
+        next_plugin_node->plugin_uninit();
+        dlclose(next_plugin_node->plugin_handle);
+
+        /* Continue with next pligin */
+		PLUGIN_NODE* current_plugin_node_memory = next_plugin_node;
+        next_plugin_node = next_plugin_node->next;
+
+#ifdef DEBUG
+		itrace("Plugin: next plugin address %p\n", next_plugin_node);
+#endif
+
+		/* Free plugin node memory, this may also reset all allocated memory depends on c lib implementation */
+		free(current_plugin_node_memory);
+    }
+
+    /* Reset plugin list */
+	global_plugin_list = NULL;
+}
+
+/* Invoke loaded plugins */
+int
+invoke_loaded_plugins (user, shell_level, cmd, argv)
+     char *user;
+     int shell_level;
+     char *cmd;
+     char **argv;
+{
+    if (global_plugin_list == NULL) {
+        return 0;
+    }
+	
+#ifdef DEBUG
+    itrace("Plugin: start invoke plugin from global list %p\n", global_plugin_list);
+#endif
+
+    /* Walk to last plugin */
+    PLUGIN_NODE *next_plugin_node = global_plugin_list;
+    while (next_plugin_node != NULL) {
+
+        /* Call plugin method */
+        int plugin_error_code = next_plugin_node->on_shell_execve(user, shell_level, cmd, argv);
+        if (plugin_error_code != 0) {
+#ifdef DEBUG
+            itrace("Plugin: on_execve return error: %d\n", plugin_error_code);
+#endif
+            /* Exit when plugin failed */
+            return plugin_error_code;
+        }
+        
+        /* Continue with next pligin */
+        next_plugin_node = next_plugin_node->next;
+		
+#ifdef DEBUG
+		itrace("Plugin: next plugin address %p\n", next_plugin_node);
+#endif
+    }
+    
+    return 0;
+}
+
+/* Load all plugins。 */
+void
+load_plugins ()
+{
+    load_plugin_by_config(plugin_config_file);
+}
+
+/* Free all plugins */
+void
+free_plugins ()
+{
+    free_loaded_plugins();
+}
+
+/* Invoke plugins before shell execve */
+int
+invoke_plugin_on_shell_execve (user, cmd, argv)
+     char *user;
+     char *cmd;
+     char **argv;
+{
+    const char* shell_level_str = get_string_value ("SHLVL");
+    const int shell_level = atoi (shell_level_str);
+
+    if (absolute_program (cmd)) {
+        // find real path for relative path command
+        char resolved_path[PATH_MAX];
+
+        // real_path_buffer should not free here because we pass resolved_path as parameter.
+        char* real_path_buffer = realpath(cmd, resolved_path);
+
+        return invoke_loaded_plugins(user, shell_level, resolved_path, argv);
+    }
+    else {
+        return invoke_loaded_plugins(user, shell_level, cmd, argv);
+    }
+}
diff --git a/bash-5.1/plugin.h b/bash-5.1/plugin.h
new file mode 100644
index 0000000..116b2c5
--- /dev/null
+++ b/bash-5.1/plugin.h
@@ -0,0 +1,79 @@
+/* plugin.h - functions from plugin.c. */
+
+/* Copyright (C) 1993-2015 Free Software Foundation, Inc.
+
+   This file is part of GNU Bash, the Bourne Again SHell.
+
+   Bash is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   Bash is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with Bash.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#if !defined (_PLUGIN_H_)
+#define _PLUGIN_H_
+
+#include "stdc.h"
+
+/* System-wide bash plugin configuration. */
+#define SYS_BASH_PLUGIN "/etc/bash.plugin"
+
+/* Plugin load result. */
+#define PLUGIN_LOAD_SUCCESS              0
+#define PLUGIN_LOAD_FAILED               1
+
+typedef enum { T_COMMAND } plugin_type_t;
+
+/* Bash plugin config. */
+typedef struct bash_plugin_conf
+{
+	const char *path;	/* path to binary */
+	char *name;		/* Used to distinguish plugins */
+} bash_plugin_conf_t;
+
+/* plugin on_shell_execve function handle type */
+typedef int on_shell_execve_t (char *user, int shell_level, char *cmd, char **argv);
+
+/* plugin plugin_init function handle type */
+typedef int plugin_init_t ();
+
+/* plugin plugin_uninit function handle type */
+typedef int plugin_uninit_t ();
+
+/* Plugin list node. */
+typedef struct plugin_node {
+    
+    /* Next plugin pointer. */
+  struct plugin_node *next;
+  
+    /* Plugin library handle. */
+  void *plugin_handle;
+  
+    /* Plugin on_shell_execve function handle. */
+  on_shell_execve_t *on_shell_execve;
+  
+    /* Plugin plugin_init function handle. */
+  plugin_init_t *plugin_init;
+  
+    /* Plugin plugin_uninit function handle. */
+  plugin_uninit_t *plugin_uninit;
+} PLUGIN_NODE;
+
+/* Load all plugins */
+extern void load_plugins __P((void));
+
+/* Free all plugins */
+extern void free_plugins __P((void));
+
+/* Invoke plugins before shell execve */
+extern int invoke_plugin_on_shell_execve __P((char *, char *, char **));
+
+#endif /* _PLUGIN_H_ */
diff --git a/bash-5.1/shell.c b/bash-5.1/shell.c
index ce8087f..6928208 100644
--- a/bash-5.1/shell.c
+++ b/bash-5.1/shell.c
@@ -46,6 +46,10 @@
 #  include <unistd.h>
 #endif
 
+#if defined (BASH_SHELL_EXECVE_PLUGIN)
+#include "plugin.h"
+#endif /* BASH_SHELL_EXECVE_PLUGIN */
+
 #include "bashintl.h"
 
 #define NEED_SH_SETLINEBUF_DECL		/* used in externs.h */
@@ -567,6 +571,10 @@ main (argc, argv, env)
   if (shopt_alist)
     run_shopt_alist ();
 
+#if defined (BASH_SHELL_EXECVE_PLUGIN)
+  load_plugins ();
+#endif /* BASH_SHELL_EXECVE_PLUGIN */
+
   /* From here on in, the shell must be a normal functioning shell.
      Variables from the environment are expected to be set, etc. */
   shell_initialize ();
@@ -810,6 +818,10 @@ main (argc, argv, env)
   /* Read commands until exit condition. */
   reader_loop ();
   exit_shell (last_command_exit_value);
+
+#if defined (BASH_SHELL_EXECVE_PLUGIN)
+  free_plugins ();
+#endif /* BASH_SHELL_EXECVE_PLUGIN */
 }
 
 static int
-- 
2.40.0.windows.1

